------------------------------------------------------------------------------
TODO:
------------------------------------------------------------------------------
 - IN PROGRESS: textures
 - DONE mesh attribute - whether normal is face normal or normal interpolated from vertices
   - now there's a <smoothness> parameter that controls how the vertex normals contribute to
     the interpolated normal: n = pow(w0, smoothness)*n0 + ... + pow(w2, smoothness)*n2
 - DONE bvh
 - material parametric - attribute to control how it's parametrized (normal, color)
 - light sources
 - ray depth
 - memory management
 - volume rendering
 - member variables - add missing m_
------------------------------------------------------------------------------
ASSUMPTIONS
------------------------------------------------------------------------------
 - texture coordinates are defined per triangle vertex index

DONE - resolve object creation before diving into this project
problem definition:
  - I want to gain experience in writing raytracers that render images on GPUs, and in writing good code, based on the knowledge I gained from the book "Code Complete" by Steve McConnell. Since I know CUDA, I'll start with this technology. Clean and well-thought code has priority over optimizations.
 
Requirements:
  - produce file with raytraced image
  - accept scene description in a form of a file
  - accept render parameters from command-line arguments
  - scene description
    - triangle-mesh objects, e.g., publicly available meshes
    - math objects, e.g., spheres
    - camera aperture
    - etc.
  - render parameters
    - resolution
    - samples per pixel
    - etc.
    - render image on a GPU
    - anticipate new obect types, new materials, etc.
    
Architecture:
  - building blocks 
    (should cover items in requirements, decoupled from other blocks, one area of responsibility)
	- command-line parser
	- scene parser - should accept scene description and produce list of objects -> objects
	- objects - classes containing objects <- list of objects from scene parser
	- renderer - takes command line arguments and renders objects <- objects, render params; -> rendered image
	- file output manager - saves the rendered image <- rendered image
  - major classes 
    (their responsibilities, interactions with other classes, class hierarchies, state transitions, alternative class design)
	- object
	  - math object
	  - triangle-mesh object
	- material
	- arg parser
	- scene parser
	- renderer
	  - CUDA renderer
	- image writer
	  - ppm writer
	  - jpeg writer
  - data design
  - user interface design
    - command line, config files
  - input/output
  - erro processing
  - change strategy
    - changing from CUDA to Vulkan

Design:
  - 

Classes:
  - renderable objects:
    - Object
      - TriangleMesh
      - Sphere
    - World - composite
  - materials
    - Material
      - Lambertian
      - Metal
      - Dielectric

load scene from file
  load all objects from file and store them in a list

pass the objects to device
  for each object create a correspoding object on device;
  can't use polymorphism based on CPU objects so an alternative solution is
  necessary

render scene
  create world object as a composite and iterate through it's elements


------------------------------------------------------------------------------
include hierarchy
------------------------------------------------------------------------------
inc std headers
inc boost headers
inc cuda headers

inc external headers
inc project headers
int own header